type: edu
files:
- name: src/cryptography/Main.kt
  visible: true
  text: |+
    package cryptography

    fun main() {
        println("Hello World!")
    }

  learner_created: false
- name: test/SteganographyTest.kt
  visible: false
  text: |+
    import org.hyperskill.hstest.dynamic.DynamicTest
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram
    import java.awt.Color
    import java.awt.image.BufferedImage
    import java.io.File
    import java.security.MessageDigest
    import javax.imageio.ImageIO

    class SteganographyTest: StageTest<Any>() {
        @DynamicTest
        fun imageCreateTest(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().toLowerCase().trim()
            if (!outputString.contains("task (hide, show, exit):")) {
                return CheckResult(false, "Prompt \"Task (hide, show, exit):\" is missing.")
            }

            outputString = main.execute("hide").toLowerCase().trim()
            if (!outputString.contains("input image file:")) {
                return CheckResult(false, "Wrong output after the \"hide\" command.")
            }

            try {
                val infile = "test/testimage.png"
                val inputFile = File(infile)
                if (!inputFile.exists()) {
                    return CheckResult(false, "Input test image file doesn't exist. Try reloading the project.")
                }
                val inputImage: BufferedImage = ImageIO.read(inputFile)
                if (imageHash(inputImage) != "cc5bc38fad61e51b44ec7731f49ae2e290c06f55") {
                    return CheckResult(false, "Input test image file is corrupted. Try reloading the project.")
                }

                outputString = main.execute(infile).toLowerCase().trim()
                if (!outputString.contains("output image file:")) {
                    return CheckResult(false, "Wrong output after inserting the input filename.")
                }

                val outfile = "test/out.png"
                outputString = main.execute(outfile).toLowerCase().trim()
                if (!( outputString.contains("input image") && outputString.contains("test/testimage.png") &&
                            outputString.contains("output image") && outputString.contains("test/out.png") &&
                            outputString.contains("is saved") && outputString.contains("task (hide, show, exit):") ) )
                {
                    return CheckResult(false, "Wrong output after inserting the output filename.")
                }
                val outputFile = File(outfile)
                if (!outputFile.exists()) {
                    return CheckResult(false, "Image file $outfile hasn't been created.")
                }
                val outputImage: BufferedImage = ImageIO.read(outputFile)
                if (imageHash(outputImage) != "8cd439311726d955682667aef835d47e01a05eb8") {
                    return CheckResult(false, "Wrong output file. Wrong output image hash.")
                }
            } catch (e: Exception) {
                return CheckResult(false, e.message)
            }


            outputString = main.execute("exit").toLowerCase().trim()
            if (!outputString.contains("bye!")) {
                return CheckResult(false, "Wrong output after the \"exit\" command.")
            }

            if (!main.isFinished) {
                return CheckResult(false, "Program has not terminated after the \"exit\" command.")
            }

            return CheckResult(true, "")
        }

        @DynamicTest
        fun nonExistFileTest(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().toLowerCase().trim()
            if (!outputString.contains("task (hide, show, exit):")) {
                return CheckResult(false, "Prompt \"Task (hide, show, exit):\" is missing.")
            }

            outputString = main.execute("hide").toLowerCase().trim()
            if (!outputString.contains("input image file:")) {
                return CheckResult(false, "Wrong output after the \"hide\" command.")
            }

            outputString = main.execute("test/notexist.png").toLowerCase().trim()
            if (outputString.contains("output image file:")) {
                outputString = main.execute("test/out.png").toLowerCase().trim()
            }
            if ( !( outputString.contains("can't read input file")
                        && outputString.contains("task (hide, show, exit):") ) ) {
                return CheckResult(false, "Wrong output after non existing input file.")
            }

            outputString = main.execute("exit").toLowerCase().trim()
            if (!outputString.contains("bye!")) {
                return CheckResult(false, "Wrong output after the \"exit\" command.")
            }

            if (!main.isFinished) {
                return CheckResult(false, "Program has not terminated after the \"exit\" command.")
            }

            return CheckResult(true, "")
        }

        private fun imageHash(inputImage: BufferedImage) : String {
            val imageByteArray = ByteArray(3 * inputImage.width * inputImage.height)
            var index = 0
            for (y in 0 until inputImage.height) {
                for (x in 0 until inputImage.width) {
                    val color = Color(inputImage.getRGB(x, y))
                    imageByteArray[index] = color.red.toByte()
                    index++
                    imageByteArray[index] = color.green.toByte()
                    index++
                    imageByteArray[index] = color.blue.toByte()
                    index++
                }
            }
            val md = MessageDigest.getInstance("SHA-1")
            md.update(imageByteArray)
            return md.digest().joinToString("") { "%02x".format(it) }
        }

    }

  learner_created: false
- name: src/cryptography/console/command/CommandExit.kt
  visible: true
  text: |
    package cryptography.console.command

    object CommandExit : Command
  learner_created: true
- name: src/cryptography/console/command/CommandFactory.kt
  visible: true
  text: |
    package cryptography.console.command

    interface CommandFactory {
        fun commandFromString(input: String): Command
    }
  learner_created: true
- name: src/cryptography/console/ConsoleHelpers.kt
  visible: true
  text: |-
    package cryptography.console

    fun printWelcome() {
        println("Task (hide, show, exit):")
    }

    fun printBye() {
        println("Bye!")
    }
  learner_created: true
- name: src/cryptography/console/command/CommandShow.kt
  visible: true
  text: |
    package cryptography.console.command

    object CommandShow : Command
  learner_created: true
- name: src/cryptography/console/command/Command.kt
  visible: true
  text: |
    package cryptography.console.command

    sealed interface Command
  learner_created: true
- name: src/cryptography/console/controller/AppControllerImpl.kt
  visible: true
  text: |
    package cryptography.console.controller

    import cryptography.console.command.CommandHide
    import cryptography.console.command.CommandShow

    class AppControllerImpl : AppController {
        override fun show(command: CommandShow) {
            println("Obtaining message from image.")
        }

        override fun hide(command: CommandHide) {
            println("Hiding message in image.")
        }
    }
  learner_created: true
- name: src/cryptography/console/Application.kt
  visible: true
  text: |
    package cryptography.console

    import cryptography.console.command.CommandFactory
    import cryptography.console.command.CommandFactoryImpl
    import cryptography.console.controller.AppController
    import cryptography.console.controller.AppControllerImpl

    object Application {
        val commandFactory: CommandFactory = CommandFactoryImpl()
        val appController: AppController = AppControllerImpl()
    }
  learner_created: true
- name: src/cryptography/console/command/CommandHide.kt
  visible: true
  text: |
    package cryptography.console.command

    object CommandHide : Command
  learner_created: true
- name: src/cryptography/console/controller/AppController.kt
  visible: true
  text: |
    package cryptography.console.controller

    import cryptography.console.command.CommandHide
    import cryptography.console.command.CommandShow

    interface AppController {
        fun show(command: CommandShow)
        fun hide(command: CommandHide)
    }
  learner_created: true
- name: src/cryptography/console/command/CommandUnknown.kt
  visible: true
  text: |
    package cryptography.console.command

    object CommandUnknown : Command
  learner_created: true
- name: src/cryptography/console/Runner.kt
  visible: true
  text: |
    package cryptography.console

    import cryptography.console.command.Command
    import cryptography.console.command.CommandExit
    import cryptography.console.command.CommandHide
    import cryptography.console.command.CommandShow
    import cryptography.console.command.CommandUnknown

    class Runner : Runnable {
        private val appController = Application.appController
        override fun run() {
            printWelcome()
            main@ while (true) {
                do {
                    val command = enterCommand()
                    when (command) {
                        CommandExit -> break@main
                        is CommandShow -> appController.show(command)
                        is CommandHide -> appController.hide(command)
                        is CommandUnknown -> println("Wrong task: [input String]")
                    }
                } while (command == CommandUnknown)
            }
            printBye()
        }

        private fun enterCommand(): Command {
            return Application.commandFactory.commandFromString(readLine()!!)
        }
    }
  learner_created: true
- name: src/cryptography/console/command/CommandFactoryImpl.kt
  visible: true
  text: |
    package cryptography.console.command

    class CommandFactoryImpl : CommandFactory {
        private val commands: List<(String) -> Command?> = listOf(
            { input -> parseExit(input) },
            { input -> parseShow(input) },
            { input -> parseHide(input) },
        )

        override fun commandFromString(input: String) = commands.firstNotNullOfOrNull { it(input) } ?: CommandUnknown

        private fun parseExit(input: String): Command? {
            return "^exit$".toRegex().matchEntire(input)?.let {
                CommandExit
            }
        }

        private fun parseShow(input: String): Command? {
            return "^show$".toRegex().matchEntire(input)?.let {
                CommandShow
            }
        }

        private fun parseHide(input: String): Command? {
            return "^hide$".toRegex().matchEntire(input)?.let {
                CommandHide
            }
        }
    }
  learner_created: true
- name: test/testimage.png
  visible: false
  learner_created: false
- name: src/cryptography/domain/usecase/Hide.kt
  visible: true
  learner_created: true
- name: src/cryptography/application/interactor/HideImpl.kt
  visible: true
  learner_created: true
- name: src/cryptography/domain/gateway/SecretImage.kt
  visible: true
  learner_created: true
- name: src/cryptography/application/gateway/SecretImageImpl.kt
  visible: true
  learner_created: true
- name: test/N.png
  visible: true
  learner_created: true
- name: test/out.png
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/160/stages/831/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 02 Nov 2021 15:55:01 UTC
record: -1
